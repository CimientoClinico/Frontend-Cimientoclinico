import { useEffect,useState } from "react";
import { useParams, } from 'react-router-dom';
import clientAxios from "../../config/axios";
import moment from "moment";
import { MdKeyboardArrowDown, MdKeyboardArrowRight,MdAddCircle } from "react-icons/md";
import { IoMdCloseCircle} from "react-icons/io";
const FormularioLlenarConsulta = () => {
    const [consulta, setConsulta] = useState([]);
    const { id } = useParams();
    const [datosPaciente, setDatosPaciente] = useState({});
    const [datosPacientediagnostico, setDatosPacientediagnostico] = useState({});
    const [datosPacientemotivo, setDatosPacientemotivo] = useState({});
    const [loading, setLoading] = useState(true); 
    const [datosCargados, setDatosCargados] = useState(false);
    const [seccionVisible, setSeccionVisible] = useState(false);
    const [nombre, setNombre] = useState('');
    const [fechadiagnostico, setFechadiagnostico] = useState('');
    const [tratamiento, setTratamiento] = useState('');
    const [ultimocontrol, setUltimoControl] = useState('');
    const [obsdiagnostico, setObsdiagnostico] = useState('');
    const [ocultarEnfermedad, setOcultarEnfermedad] = useState({});
    const [mostrarFormulario, setMostrarFormulario] = useState(false);
    const [enfermedadActualId, setEnfermedadActualId] = useState(null);
    
    const toggleEnfermedad = (enfermedadId) => {
      setOcultarEnfermedad((prevOcultarEnfermedad) => ({
        ...prevOcultarEnfermedad,
        [enfermedadId]: !prevOcultarEnfermedad[enfermedadId]
      }));
    };
    const cerrarModal = () => {
      setMostrarFormulario(false);
    };
      const VerFormularioCerrado = () => {
    setMostrarFormulario(!mostrarFormulario);
  };
    const handleSubmit = async (e) => {
      e.preventDefault();
  
      try {
        if (!nombre) {
          Swal.fire('¡Error!', 'Por favor, Agregue un nombre para el diagnóstico', 'error');
          return;
        }
        if (!fechadiagnostico) {
          Swal.fire('¡Error!', 'Por favor, Agregue fecha del diagnóstico', 'error');
          return;
        }
        if (!tratamiento) {
          Swal.fire('¡Error!', 'Por favor, Agregue un tratamiento.', 'error');
          return;
        }
        const tokenPro = localStorage.getItem("tokenPro");
        if (!tokenPro) return;
    
        const config = {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${tokenPro}`,
          },
        };
    
        await clientAxios.post('/profesional/agregar-enfermedad-motivo', {
          pacienteId: consulta.paciente._id,
          nombre,
          fechadiagnostico,
          tratamiento,
          ultimocontrol,
          obsdiagnostico,
          motivoId: consulta.motivoconsulta._id
        },config);
        const { data } = await clientAxios.get(
          `/profesional/informacion-paciente-consulta/${id}`,
          config
        );
   
        setConsulta(data);
        setDatosPaciente(data.enfermedades);
        fetchData();
        setNombre('');
        setFechadiagnostico('');
        setTratamiento('');
        setUltimoControl('');
        setObsdiagnostico('');
        setMostrarFormulario(false)
        // Mostrar mensaje de éxito o redireccionar a otra página
        Swal.fire('¡Perfecto!', 'Diangóstico actualizado con éxito', 'success');
      } catch (error) {
        console.log(error);
        // Mostrar mensaje de error
        Swal.fire('¡Error!', 'No se puede guardar el diagnóstico', 'error');
      }
    };
    
    const fetchData = async () => {
    const tokenPro = localStorage.getItem('tokenPro');
    if (!tokenPro) return;
    const config = {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${tokenPro}`
      }
    };
      try {
        const { data } = await clientAxios.get(`/profesional/informacion-paciente-consulta/${id}`, config);
     setConsulta(data)
     setLoading(false);
      } catch (error) {
        console.log(error);
      }
    };
    useEffect(() => {
        fetchData();
      }, [id]); 
      useEffect(() => {
        if (consulta) {
          setDatosPaciente(consulta);
          setDatosCargados(true);
        }
      }, [consulta]);
      useEffect(() => {
        if (consulta.motivoconsulta) {
          setDatosPacientemotivo(consulta.motivoconsulta);
          setDatosCargados(true);
        }
      }, [consulta.motivoconsulta]);
      useEffect(() => {
        if (consulta && Array.isArray(consulta.enfermedades)) {
          setDatosPacientediagnostico(consulta.enfermedades);
        }
      }, [consulta]);
      const actualizarConsulta = async () => {
        const tokenPro = localStorage.getItem('tokenPro');
        if (!tokenPro) return;
      
        const config = {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${tokenPro}`
          }
        };
        try {
          await clientAxios.put(`/profesional/actualizar-consulta-ficha/${id}`, datosPaciente,config);

        } catch (error) {
          console.error(error.message);
          // Mostrar un mensaje de error o realizar acciones adicionales en caso de error
        }
      };
      const actualizarMotivo = async () => {
        const tokenPro = localStorage.getItem('tokenPro');
        if (!tokenPro) return;
    
        const config = {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${tokenPro}`
          }
        };
    
        try {
          await clientAxios.put(`/profesional/actualizar-motivo-ficha/${datosPacientemotivo._id}`, datosPacientemotivo, config);
        } catch (error) {
          console.error(error.message);
          // Mostrar un mensaje de error o realizar acciones adicionales en caso de error
        }
      };
      const actualizarPaciente = async () => {
          const tokenPro = localStorage.getItem('tokenPro');
          if (!tokenPro || !enfermedadActualId) return;
      
          const config = {
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${tokenPro}`
            }
          };
      
          try {
            const enfermedad = datosPacientediagnostico[enfermedadActualId];
      
            await clientAxios.put(`/profesional/editar-enfermedades-paciente/${enfermedad._id}`, enfermedad, config);
      
            // Obtener los datos actualizados después de la actualización
            fetchData();
            
          } catch (error) {
            console.error(error.message);
          }

      };

      const handleChange = (e) => {
        const { name, value } = e.target;
        setDatosPaciente((prevState) => ({
          ...prevState,
          [name]: value
        }));
      };
      const handleChangemotivo = (e) => {
        const { name, value } = e.target;
        setDatosPacientemotivo((prevState) => ({
          ...prevState,
          [name]: value
        }));
      };
      const handleChangediagnostico = (e, enfermedadId) => {
        const { name, value } = e.target;
        setDatosPacientediagnostico((prevState) => ({
          ...prevState,
          [enfermedadId]: {
            ...prevState[enfermedadId],
            [name]: value
          }
        }));
      
        setEnfermedadActualId(enfermedadId); // Establecer el ID de la enfermedad actual
      };
      const guardarDatos = async () => {
        const confirmar = await Swal.fire({
          title: '¿Quieres actualizar la información de la consulta?',
          icon: 'info',
          showCancelButton: true,
          confirmButtonColor: '#5d5ddb',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Si, Guardar'
        }).then((result) => {
          if (result.isConfirmed) {
            return true;
          } else {
            return false;
          }
        });
      
        if (confirmar) {
          try {
            actualizarConsulta();
            actualizarMotivo();
            actualizarPaciente();
      
            Swal.fire('¡Perfecto!', 'Sección publicada', 'success');
          } catch (error) {
            Swal.fire('Error', 'Ha ocurrido un error', 'error');
            console.error(error);
          }
        }
      };
      
      const now = moment();
      const showButton = consulta && now.isSameOrAfter(moment(consulta.fecha).add(consulta.horarioinicio));

      const toggleSeccionVisible = () => {
        setSeccionVisible(!seccionVisible);
      };
      const formatearFecha = (fecha) => {
        const nuevaFecha = new Date(fecha);
        nuevaFecha.setMinutes(nuevaFecha.getMinutes() + nuevaFecha.getTimezoneOffset());
        const formatoFecha = {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
        };
        return nuevaFecha.toLocaleDateString('es-CL', formatoFecha);
      };
      function isValidDate(dateString) {
        const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
        return dateRegex.test(dateString);
      }
    
      const motivoConsultaId = datosPaciente.motivoconsulta?._id;

  return (
    <>
{loading || !datosCargados ? (
  <p className="max-w-7xl mx-auto bg-gray-200  py-5 rounded-md px-2">Cargando...</p>
) : (
    <div className="">
  <h1 className="text-center text-lg font-semibold">Registro de la consulta</h1>
    <div className="max-w-7xl mx-auto bg-lila-300 px-3 py-1 rounded-t flex justify-start">
      <button
        className=" py-2 text-sm rounded-md  text-white "
        onClick={toggleSeccionVisible}
      >
        {seccionVisible ? <div className="flex"> <p className="text-sm font-semibold">Registro de la atención </p>  <p className="text-xl">
     <MdKeyboardArrowDown />
        </p></div> :<div className="flex"> <p className="text-sm font-semibold">Registro de la atención</p>   <p className="text-xl">
          <MdKeyboardArrowRight />
        </p></div>} 
      </button>
    </div>
    {seccionVisible && (
   <div className="max-w-7xl mx-auto px-2 border-l-2 border-l-indigo-200 border-r-2 border-r-indigo-200 border-b-2  border-b-indigo-200 bg-gray-50">
   <div className="py-2 ">
 
     <label htmlFor="" className="text-sm font-regular">Registro de la consulta</label>
            <textarea
                className="w-full h-28 p-3 bg-white border border-gray-300 rounded resize-none outline-none focus:border-indigo-500"
                placeholder="Escribe aquí los detalles de la consulta del paciente..."
                type="text"
                name="registro"
                value={datosPaciente.registro || ''}
                onChange={handleChange}
            ></textarea>

            <div className="grid grid-cols-1 sm:grid-cols-1 gap-1">
            <div className="flex flex-col text-sm">
            <label htmlFor="impresiondiagnostica" className="text-sm font-regular">Impresión diagnóstica</label>
            <textarea
                className="w-full h-16 p-3 bg-white border border-gray-300 rounded-md resize-none outline-none focus:border-indigo-500"
                placeholder="Ingrese la impresión diagnóstica..."
                type="text"
                name="impresiondiagnostica"
                value={datosPacientemotivo.impresiondiagnostica || ''}
                onChange={handleChangemotivo}
            ></textarea>
            </div>
            </div>


            <div className="text-center font-semibold">
              DIAGNÓSTICOS ASIGNADOS EN ESTE MOTIVO DE CONSULTA
            </div>
            <div className=" flex justify-end">
            {showButton && (
    <button
      onClick={VerFormularioCerrado}
      className="text-sm rounded-xl px-2 focus:outline-none focus:border-lila-200 text-white bg-lila-100 hover:bg-lila-100 hover:text-lila-200"
    >
      {mostrarFormulario ? (
        <div className="flex">
          <IoMdCloseCircle className="text-2xl" />
        </div>
      ) : (
        <div className="flex">
          Agregar diagnóstico<MdAddCircle className="text-2xl" />
        </div>
      )}
    </button>
  )}

            </div>
            </div>
            <div>
            <div >

  <div >

{ Object.keys(datosPacientediagnostico)
  .filter((enfermedadId) => {
    const enfermedad = datosPacientediagnostico[enfermedadId];
    return enfermedad && enfermedad.motivoconsulta?.includes(motivoConsultaId);
  })
  .map((enfermedadId, index) => {
    const numeroEnumeracion = index + 1;
    const isEnfermedadOculta = ocultarEnfermedad[enfermedadId] || false;
    const enfermedad = datosPacientediagnostico[enfermedadId];

  return (
    <div className=" bg-gray-50 " key={enfermedadId}>
<div className="" >
  <div className="container mx-auto p-1">
  <div className="grid grid-cols-2 items-center  ">
  <div className="flex justify-start gap-2 ">
    <div className="">
    <h2 className="text-md font-semibold">{numeroEnumeracion}.-</h2>
    </div>
    <div>
    <h2 className="text-md font-regular">
    {enfermedad.nombre}:
    </h2>
      </div>
      <div>
    <h2 className="text-md font-regular">
    {enfermedad.guardadoporpaciente ===false ? ` (${formatearFecha(enfermedad.fechadiagnostico)}) `  : ` (${enfermedad.fechadiagnostico}) ` } 
    
    </h2>
      </div>
    <div>

    <button
      className="text-blue-500 focus:outline-none"
      onClick={() => toggleEnfermedad(enfermedadId)}
    >
      {isEnfermedadOculta ? (
        <p className="text-3xl">< MdKeyboardArrowDown/></p>
      ) : (
        <p className="text-3xl"><MdKeyboardArrowRight /></p>
      )}
    </button>
    </div>


  </div>


</div>
        {isEnfermedadOculta && (
          <>
   {showButton ? (
  <div className="grid grid-cols-1 sm:grid-cols-1 gap-1">
    <div className="flex flex-col text-sm">
  <div className="flex items-center">
    <label htmlFor="nombre">Nombre del diagnóstico:</label>
    <input
      key={enfermedadId}
      type="text"
      className={`border px-2 py-1.5 rounded-lg ml-2 flex-grow ${enfermedad.guardadoporpaciente ? 'text-gray-600' : 'text-black'}`}
      name="nombre"
      placeholder="Nombre exacto del diagnóstico"
      value={enfermedad.nombre || ''}
      onChange={(e) => handleChangediagnostico(e, enfermedadId)}
    />
  </div>
</div>
      <div className="flex flex-col text-sm">
        <div className="flex items-center">
        <label htmlFor="fechadiagnostico" className={` ${enfermedad.pacientefechadiagnostico===true ? 'text-gray-600' : 'text-black'}`}> Fecha de diagnóstico: {enfermedad.pacientefechadiagnostico===true ? enfermedad.fechadiagnostico : '' }</label>
      <input
  key={enfermedadId}
  type="date"
  className={`border px-2 py-1.5 rounded-lg ml-6 flex-grow ${enfermedad.guardadoporpaciente ? 'text-gray-600' : 'text-black' }`}
  name="fechadiagnostico"
  value={isValidDate(enfermedad.fechadiagnostico) ? enfermedad.fechadiagnostico : ''}
  onChange={(e) => handleChangediagnostico(e, enfermedadId)}
/>
</div>
      </div>
      <div className="flex flex-col  text-sm">
        <div className="flex items-center">
        <label htmlFor="ultimocontrol" className="mb-2">Último control:</label>
        <input
          key={enfermedadId}
          type="date"
          className={`border px-2 py-1.5 rounded-lg ml-16 flex-grow ${enfermedad.guardadoporpaciente ? 'text-gray-600' : 'text-black'}`}
          name="ultimocontrol"
          value={enfermedad.ultimocontrol || ''}
          onChange={(e) => handleChangediagnostico(e, enfermedadId)}
        />
        </div>

      </div>

      <div className="flex flex-col text-sm">
        <div className="flex items-center">
        <label htmlFor="tratamiento" className="mb-2">Tratamiento:</label>
                        <textarea
          key={enfermedadId}
          type="text"
          className={`border px-2 py-2 rounded-lg ml-20 flex-grow ${enfermedad.guardadoporpaciente ? 'text-gray-600' : 'text-black'}`}
          name="tratamiento"
          placeholder="Tratamiento para este diagnóstico"
          value={enfermedad.tratamiento || ''}
          onChange={(e) => handleChangediagnostico(e, enfermedadId)}
        />
        </div>

      </div>
      <div className="flex flex-col text-sm">
        <div className="flex items-center">
        <label htmlFor="obsdiagnostico" className="mb-2">Observaciones diagnóstico:</label>
        <textarea
          key={enfermedadId}
          type="text"
          className={`border px-2 py-2 rounded-lg ml-1 flex-grow ${enfermedad.guardadoporpaciente ? 'text-gray-600' : 'text-black'}`}
          name="obsdiagnostico"
          placeholder="Agregar recomendaciones o información relevante"
          value={enfermedad.obsdiagnostico || ''}
          onChange={(e) => handleChangediagnostico(e, enfermedadId)}
        />
        </div>
      </div>
      </div>
      ) : (
        <div className="flex flex-col text-sm gap-1">
        <div className="flex items-center  gap-1">
          <label htmlFor="nombre" className="font-bold">Nombre del diagnóstico:</label>

          <label>{enfermedad.nombre||''} </label>
        </div>
        <div className="flex items-center gap-1">
          <label>{enfermedad.fechadiagnostico||''}</label>
        </div>
        <div className="flex items-center  gap-1">
          <label htmlFor="ultimocontrol" className="font-bold">
            Último control:
          </label>
          <label>{enfermedad.ultimocontrol||''}</label>
        </div>
        <div className="flex items-center  gap-1">
          <label htmlFor="tratamiento" className="font-bold">
            Tratamiento:
          </label>

          <label >{enfermedad.tratamiento||''}</label>
        </div>
        <div className="flex items-center  gap-1">
          <label htmlFor="obsdiagnostico" className="font-bold">
            Observaciones diagnóstico:
          </label>
          <label>{enfermedad.obsdiagnostico||''}</label>
        </div>
      </div>
    )}

      </>
        )}
  </div>

</div>
<hr />
</div>


);
})}

</div>

  <div>

  </div>

<div>
</div>
</div>

            </div>
            <div className=" flex justify-center mt-2">
             {showButton && (
               <button className="px-4 py-3 text-sm rounded-md text-center mb-2 text-white bg-lila-200 hover:bg-lila-100" onClick={guardarDatos}>
               Guardar 
             </button>
            )}
            </div>
            </div>
            )  }

        </div>



    )}
      {mostrarFormulario && (
  <div className="fixed inset-0 flex  items-center justify-center z-50">
    <div
      className="bg-gray-800 bg-opacity-75  absolute inset-0 pointer-events-none"
      onClick={cerrarModal}
    ></div>
    <div className="bg-white rounded-lg p-6 relative w-96 ">
      <button onClick={cerrarModal} className="absolute top-0 right-0 p-2 ">
      < IoMdCloseCircle className="text-3xl text-lila-300  hover:text-lila-100 "/>
      </button>

      <form className="p-2 " onSubmit={handleSubmit}>
    <h1 className=" text-center text-xl font-bold p-2">Nuevo diagnóstico</h1>
    <div className="grid grid-cols-1 sm:grid-cols-1 gap-1 ">
    <div className="flex flex-col text-sm">
        <label htmlFor="nombre" className="mb-2 ">Nombre del diagnóstico</label>
        <input
  type="text"
  className="border px-4 py-2 rounded-lg w-full "
  name="nombre"
  id="nombre" 
  placeholder="Nombre exacto del diagnóstico"
  value={nombre}
  onChange={(e) => setNombre(e.target.value)} 
/>
      </div>
      <div className="flex flex-col text-sm">
        <label htmlFor="fechadiagnostico"className="mb-2 ">Fecha de diagnóstico:</label>
        <input
  type="date" 
  id="fechadiagnostico"
  className="border px-4 py-2 rounded-lg w-full "
  value={fechadiagnostico}
  onChange={(e) => setFechadiagnostico(e.target.value)}
/>
      </div>
      <div className="flex flex-col text-sm">
        <label htmlFor="ultimocontrol"className="mb-2 ">Último control:</label>
        <input
  type="date" 
  id="ultimocontrol"
  className="border px-4 py-2 rounded-lg w-full "
  value={ultimocontrol}
  onChange={(e) => setUltimoControl(e.target.value)} 
/>
      </div>
    </div>

    <div className="flex flex-col text-sm">
        <label htmlFor="tratamiento" className="mb-2">Tratamiento:</label>
        <textarea
          type="text"
          id="tratamiento"
          className="border px-4 py-2 rounded-lg w-full"
          value={tratamiento}
          placeholder="Tratamiento para este diagnóstico"
          onChange={(e) => setTratamiento(e.target.value)} 
        />
      </div>
      <div className="flex flex-col text-sm">
        <label htmlFor="obsdiagnostico" className="mb-2">Observaciones diagnóstico:</label>
        <textarea
          type="text"
          id="obsdiagnostico"
          className="border px-4 py-2 rounded-lg w-full"
          placeholder="Agregar recomendaciones o información relevante"
          value={obsdiagnostico} 
          onChange={(e) => setObsdiagnostico(e.target.value)} 
        />
      </div>
      <div className="flex  text-sm mt-2 gap-1 bg-blue-200 px-2 py-1 rounded">
        <p  className="  font-bold">motivo de consulta: </p>
        <p className=" font-regular">  {' '} {datosPacientemotivo.titulo}  </p>
      
      </div>

    <div className="flex justify-center py-2">
        <button  type="submit" className="bg-lila-200 hover:bg-lila-100 text-white font-semibold py-2 px-4 rounded-lg">
         Guardar
        </button>
        
      </div>

  </form>
  </div>
        </div>
      )}

    </>
  )
}

export default FormularioLlenarConsulta