import { useState, useEffect } from 'react';
import 'react-big-calendar/lib/css/react-big-calendar.css';
import { Calendar, dateFnsLocalizer } from 'react-big-calendar';
import dayjs from 'dayjs';
import 'dayjs/locale/es'; // importa la localizaci√≥n en espa√±ol
import clientAxios from '../../config/axios';
import useAuth from "../../hooks/useAuth"
import format from 'date-fns/format'
import parse from 'date-fns/parse'
import startOfWeek from 'date-fns/startOfWeek'
import getDay from 'date-fns/getDay'
import es from 'date-fns/locale/es';

const locales = {
  'es': es,
};

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales,
})
const BigCalendar = () => {
  const [eventos, setEventos] = useState([]);
  const [consultas, setConsultas] = useState([])
  const { auth} =  useAuth()
  const obtenerEventos = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) return;
  
      const config = {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      };
  
      const response = await clientAxios.get('/pacientes/ver-MiHorario', config);
      setEventos(response.data);
    } catch (error) {
      console.log(error);
    }
  };
  useEffect(() => {
    const obtenerMotivosConsulta = async() =>{
      try {
        const token = localStorage.getItem('token')
        if(!token) return
  
        const config={
          headers:{
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
        }
        }
        const { data } = await clientAxios.get('/pacientes/obtener-consultas',config)
        setConsultas(data)
      } catch (error) {
        console.log(error)
      }
  
    }
    obtenerMotivosConsulta()      
  },[])

  useEffect(() => {
    obtenerEventos();
  }, []);
  const eliminarHorario = async (id) => {
    const confirmar = await Swal.fire({
      title: '¬øEst√°s seguro de eliminar tu horario disponible?',
      text: "!No podr√°s revertir esto!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#9ba4ea',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Si, eliminarlo!'
      }).then((result) => {
      if (result.isConfirmed) {
          return true;
      } else {
          return false;
      }
  })
  if(confirmar) {
    try {
      const token = localStorage.getItem('token')
      if(!token) return
  
      const config={
        headers:{
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`
      }
      }
      await clientAxios.delete(`/pacientes/borrar-horario/${id}`,config);
      setEventos(eventos.filter((evento) => evento.id !== id)); 

    } catch (error) {
      console.log(error);
    }
  }
  };
  const handleEliminarHorario = async (id) => {
    await eliminarHorario(id);
    obtenerEventos();
  };
    const consultasPendientes = consultas.filter(con => con.paciente === auth._id && con.estado === 'pagado').map(consulta => {
      
      const [hours, minutes] = consulta.horarioinicio.split(":");
      const start = dayjs.utc(consulta.fecha).tz("America/Santiago").toDate();
      start.setHours(hours);
      start.setMinutes(minutes);
        
      const [hours2, minutes2] = consulta.horariofin.split(":");
      const end = dayjs.utc(consulta.fecha).tz("America/Santiago").toDate();
      end.setHours(hours2);
      end.setMinutes(minutes2);
      
      return {
        ...consulta,
        start,
        end
      };
    });
    const formatconsultas = () => {
    return consultasPendientes.map(consulta => {
        const fecha = dayjs(consulta.fecha);
        const start = fecha.set('hour', consulta.horarioinicio.split(':')[0]).set('minute', consulta.horarioinicio.split(':')[1]).toDate();
        const end = fecha.set('hour', consulta.horariofin.split(':')[0]).set('minute', consulta.horariofin.split(':')[1]).toDate();
      return {
        title: ` Consulta con el Profesional: ${consulta.profesional.nombres} ${consulta.profesional.apellidos} (${consulta.profesional.especialidad})`,
        start,
        end,
        isHorario: false
      };
    });
};


  
  const formatEventos = (eventos) => {
    return eventos.map((evento) => {
      const fecha = dayjs(evento.fecha);
      const start = fecha.set('hour', evento.horarioinicio.split(':')[0]).set('minute', evento.horarioinicio.split(':')[1]).toDate();
      const end = fecha.set('hour', evento.horariofin.split(':')[0]).set('minute', evento.horariofin.split(':')[1]).toDate();
  
      return {
        title: `Horario disponible ${evento.horarioinicio}-${evento.horariofin}`,
        start,
        end,
        id: evento._id,
        isHorario: true 
      };
    });
  };

  const eventosFormateados = formatEventos(eventos);
const consultasFormateadas = formatconsultas(consultasPendientes);
const eventosCombinados = eventosFormateados.concat(consultasFormateadas);
const CustomEvent = ({ event }) => {

  return (

    <div className="custom-event">
      <div className="event-title">{event.title}</div>
      {event.isHorario && (
        <div >
        <button

          onClick={() => handleEliminarHorario(event.id)}
        >üóëÔ∏è</button>
        </div>
      )}

    </div>
  );
};
const eventStyleGetter = (event) => {
    let backgroundColor = '';
    if (event.title.includes('Horario disponible')) {
      backgroundColor = '#9ecb90'
     

    } else {
      backgroundColor = '#cfb1ff'; 
    }

    return {
      style: {
        backgroundColor,
      },
    };
  };


  return (
    
    <div className='px-10'>
        <h1 className='text-center text-2xl '>TUS HORARIOS DISPONIBLES</h1>
        <Calendar
  culture='es'
  localizer={localizer}
  events={eventosCombinados}
  startAccessor="start"
  endAccessor="end"
  style={{ height: 600 }}
  eventPropGetter={eventStyleGetter}
  components={{
    event: CustomEvent
  }}
/>
    </div>
  );
};

export default BigCalendar;
