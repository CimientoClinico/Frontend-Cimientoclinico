
import { useEffect, useState } from 'react';
import Alerta from '../../components/AlertaModal';
import clientAxios from "../../config/axios";
import Modal from "../../components/Modal"
const ModuloProfesional = () => {
  const [profesional,setProfesional]= useState([]);
  const [email, setEmail] = useState('')
  const [rut, setRut] = useState('')
  const [nombres, setNombres] = useState('')
  const [especialidad, setEspecialidad] = useState(''); 
  const [apellidos, setApellidos] = useState('')
  const [password, setPassword] = useState('')
  const [repetirPassword, setRepetirPassword] = useState('')
  const [alerta, setAlerta ]= useState({})
  const [showModal, setShowModal]= useState(false)
  const [showModalEditar, setShowModalEditar]= useState(false)
  


    const formatearFecha = (fecha) => {
      const nuevaFecha = new Date(fecha)
      return new Intl.DateTimeFormat('es-CL', {dateStyle: 'long'}).format(nuevaFecha) }
  

 const setEdicion=(profe)=> {
  console.log(profe._id)
  profesional._id=profe.id
 }
  useEffect(()=>{
    const obtenerProfesionales = async() =>{
      try {
        const token = localStorage.getItem('token')
        if(!token) return

        const config={
          headers:{
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
        }
        }
        const { data } = await clientAxios("/admin/modulo-profesional",config)
        setProfesional(data)
      } catch (error) {
        console.log(error)
      }

    }
    obtenerProfesionales()

  },[])
  const handleSubmit = async e =>{
      
    e.preventDefault();
    
    if([email,rut,nombres,apellidos,password,repetirPassword,especialidad].includes('')){
      setAlerta({msg: 'Hay campos vacíos', error: true})
      return;
    }

    if(password !== repetirPassword){
      setAlerta({msg: 'Las contraseñas deben ser iguales', error: true})
      return;
    }
    if(rut.length < 9 || rut.length > 10 ){
      setAlerta({msg: 'RUT no válido. Ejemplo:11111111-1', error: true})
      return;
    }

    if(password.length < 6 ){
      setAlerta({msg: 'La contraseña debe tener al menos 6 caracteres', error: true})
      return;
    }


    setAlerta({})

    //Peticion al backend para crear usuario
    const token = localStorage.getItem('token')
    const config = {
      headers:{
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`
      }
    }
    try{
       await clientAxios.post('admin/modulo-profesional',{email,rut,nombres,apellidos,password,especialidad}, config)
       setAlerta({
        msg: 'Profesional registrado, Email de confirmación enviado',
        error: false
       })

    }
    catch(error){
      setAlerta({
        msg: error.response.data.msg,
        error:true
      })

    }


   }

   const { msg } = alerta
  return (
    <>
    <h1 className='text-center'>Modulo profesionales</h1>
    <div className="max-w-7xl mx-auto text-right">
    <button onClick={()=> setShowModal(true)} className="bg-blue-500 text-sm text-white active:bg-teal-600 font-bold uppercase  px-6 py-3 rounded-full shadow-md hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button">
Agregar Profesional
</button>	
    </div>

<Modal isVisible={showModal} onClose={()=> setShowModal(false)}  > 
<div className=" bg-gray-100 flex flex-col justify-center sm:py-2">
<div className="p-1 xs:p-0 mx-auto md:w-full md:max-w-sm">
<h1 id="textologo" className="font-bold font-nunito text-center text-2xl ">Cimiento Clínico</h1>
<h3 className="font-semibold font-nunito text-center text-mb mb-2">Registro de profesionales</h3>

<div className="bg-white shadow w-full rounded-lg divide-y divide-gray-200">

  <form  className="px-10 py-2" onSubmit={handleSubmit}>
  {msg && <Alerta 
              alerta={alerta}
              />}
    <label className="font-semibold text-sm text-gray-700 pb-0 block" >Correo Electrónico</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    type="email"
    placeholder="Ingresa tu correo electronico" 
    value={email}
    onChange={e => setEmail(e.target.value) }

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Nombres</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Ingresa ambos nombres" 
    value={nombres}
    onChange={e => setNombres(e.target.value) }

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Apellidos</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Ingresa ambos apellidos" 
    value={apellidos}
    onChange={e => setApellidos(e.target.value) }

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Rut</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="RUT.Ejemplo:11111111-1" 
    value={rut}
    onChange={e => setRut(e.target.value) }

    />
      <label className="font-semibold text-sm text-gray-600 pb-1 block" >Especialidad</label>
    <input
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Tipo de profesional" 
    value={especialidad}
    onChange={e => setEspecialidad(e.target.value) }/> 

    <label className="font-semibold text-sm text-gray-600 pb-1 block">Contraseña</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full"  
    placeholder="Ingresar ultimos 6 digitos del RUT"
    type="password" 
    value={password}
    onChange={e => setPassword(e.target.value) }

    />
      <label className="font-semibold text-sm text-gray-600 pb-1 block">Confirmar Contraseña</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    type="password"  
    placeholder="Confirma la contraseña" 
    value={repetirPassword}
    onChange={e => setRepetirPassword(e.target.value) }
    />
    
        <button id="primario" type="submit" className="block w-full font-nunito py-1 rounded-xl hover:bg-indigo-700 hover:-translate-y-1 transition-all duration-500 text-white font-semibold mb-2">Registrar profesional</button>
  </form>

</div>

</div>
</div>
</Modal>
<Modal isVisible={showModalEditar} onClose={()=> setShowModalEditar(false)}  > 
<div className=" bg-gray-100 flex flex-col justify-center sm:py-2">
<div className="p-1 xs:p-0 mx-auto md:w-full md:max-w-sm">
<h1 id="textologo" className="font-bold font-nunito text-center text-2xl ">Cimiento Clínico</h1>
<h3 className="font-semibold font-nunito text-center text-mb mb-2">Registro de profesionales</h3>

<div className="bg-white shadow w-full rounded-lg divide-y divide-gray-200">
{msg && <Alerta 
              alerta={alerta}
              />}
  <form  className="px-10 py-2" onSubmit={handleSubmit}>
    <label className="font-semibold text-sm text-gray-700 pb-0 block" >Correo Electrónico</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    type="email"
    placeholder="Ingresa tu correo electrónico" 
    value={setEdicion.profe_id}

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Nombres</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Ingresa ambos nombres" 
    value={nombres}
    onChange={e => setNombres(e.target.value) }

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Apellidos</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Ingresa ambos apellidos" 
    value={apellidos}
    onChange={e => setApellidos(e.target.value) }

    />
     <label className="font-semibold text-sm text-gray-600 pb-1 block" >Rut</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="RUT.Ejemplo:11111111-1" 
    value={rut}
    onChange={e => setRut(e.target.value) }

    />
      <label className="font-semibold text-sm text-gray-600 pb-1 block" >Especialidad</label>
    <input
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    placeholder="Tipo de profesional" 
    value={especialidad}
    onChange={e => setEspecialidad(e.target.value) }/> 

    <label className="font-semibold text-sm text-gray-600 pb-1 block">Contraseña</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full"  
    placeholder="Ingresar ultimos 6 digitos del RUT"
    type="password" 
    value={password}
    onChange={e => setPassword(e.target.value) }

    />
      <label className="font-semibold text-sm text-gray-600 pb-1 block">Confirmar Contraseña</label>
    <input 
    className="border rounded-lg px-3 py-1 mt-1 mb-3 text-sm w-full" 
    type="password"  
    placeholder="Confirma la contraseña" 
    value={repetirPassword}
    onChange={e => setRepetirPassword(e.target.value) }
    />
    
        <button id="primario" type="submit" className="block w-full font-nunito py-1 rounded-xl hover:bg-indigo-700 hover:-translate-y-1 transition-all duration-500 text-white font-semibold mb-2">Registrar profesional</button>
  </form>

</div>

</div>
</div>
</Modal>


<div className="max-w-7xl mx-auto">
    <div className="inline-block min-w-full py-2 align-middle">
        <div className="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
            <table className="min-w-full divide-y divide-gray-300">
                <thead className="bg-gray-50">
                    <tr>
                        <th scope="col" className="py-3.5 pl-4 font-nunito pr-3 text-center text-sm font-semibold text-gray-900 sm:pl-6">RUT</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito text-center text-sm font-semibold text-gray-900">Nombres</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito text-center text-sm font-semibold text-gray-900">Apellidos</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito  text-center text-sm font-semibold text-gray-900">Email</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito text-center text-sm font-semibold text-gray-900">Fecha Creación</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito text-center text-sm font-semibold text-gray-900">Especialidad</th>
                        <th scope="col" className="px-3 py-3.5 font-nunito text-center text-sm font-semibold text-gray-900">¿Confirmado?</th>
                        <th scope="col" className="font-bold font-nunito ">Acciones </th>
                    </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 bg-white">
                {profesional.map((profe)=>(
                    <tr key={profe._id}>
                        <td className="text-center py-4 pl-4 pr-3 text-sm font-semibold text-gray-900 sm:pl-6">{profe.rut}</td>
                        <td className="text-center px-3 py-4 text-sm">{profe.nombres}</td>
                        <td className="text-center px-3 py-4 text-sm">{profe.apellidos} </td>
                        <td className="text-center px-3 py-4 text-sm">{profe.email} </td>
                        <td className="text-center px-3 py-4 text-sm">{formatearFecha(profe.fecha)}</td>
                        <td className="text-center px-3 py-4 text-sm">{profe.especialidad}</td>
                        <td className="text-center px-3 py-4 text-sm">
                            <span className="flex justify-center">
                            {(profe.confirmado== true ?<svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                                </svg>:<svg fill="#FA5252" xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 30 30" width="20px" height="20px">    <path d="M15,3C8.373,3,3,8.373,3,15c0,6.627,5.373,12,12,12s12-5.373,12-12C27,8.373,21.627,3,15,3z M16.414,15 c0,0,3.139,3.139,3.293,3.293c0.391,0.391,0.391,1.024,0,1.414c-0.391,0.391-1.024,0.391-1.414,0C18.139,19.554,15,16.414,15,16.414 s-3.139,3.139-3.293,3.293c-0.391,0.391-1.024,0.391-1.414,0c-0.391-0.391-0.391-1.024,0-1.414C10.446,18.139,13.586,15,13.586,15 s-3.139-3.139-3.293-3.293c-0.391-0.391-0.391-1.024,0-1.414c0.391-0.391,1.024-0.391,1.414,0C11.861,10.446,15,13.586,15,13.586 s3.139-3.139,3.293-3.293c0.391-0.391,1.024-0.391,1.414,0c0.391,0.391,0.391,1.024,0,1.414C19.554,11.861,16.414,15,16.414,15z"/></svg> )}
                            </span>
                        </td>   
                        <td className="p-2 md:border md:border-grey-500 text-center block md:table-cell">
					              <span className="inline-block w-1/3 md:hidden font-bold">Acciones</span>
					              <button
                        type='button'
                        className="bg-blue-500 hover:bg-blue-700 text-white  font-nunito font-semibold py-1 mr-2 px-2 border border-blue-500 rounded"
                       onClick={()=> setShowModal(true)} 
                        >Editar</button>
					              <button className="bg-red-500 hover:bg-red-700 text-white font-nunito font-semibold py-1 px-2 border border-red-500 rounded">Eliminar</button>
			             	</td>
                    </tr>

                    ))}
                </tbody>
            </table>
        </div>
    </div>
</div>

    </>
  )
}

export default ModuloProfesional


onChange={(e) => setImage("image", e.target.files[0])}/>



<div class="flex  items-center justify-center">
<form onSubmit={fotoPerfil} method="post" enctype="multipart/form-data">
<label class="w-30 h-30 flex flex-col items-center px-4 py-1 bg-blue-500  rounded-lg shadow-lg text-white border border-blue cursor-pointer hover:bg-blue hover:text-slate-300">
<svg class="w-6 h-6" fill="currentColor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
  <path d="M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4-4-4 4h3v3h2v-3z" />
</svg>
<input type="file" />


</label> <button type="submit" > mandar</button>
</form>
</div>
      headers:{
        Accept: 'application/json',
        'Content-Type': 'multipart/form-data',
          Authorization:`Bearer ${token}`
      }


      .then(res => {
        const data = res.data
        console.log(datos)
       console.log(data)

      })