import React from 'react'
import FullCalendar from '@fullcalendar/react' 
import dayGridPlugin from '@fullcalendar/daygrid' 
import { useState, useEffect } from 'react';
import esLocale from '@fullcalendar/core/locales/es';
import timeGridPlugin from '@fullcalendar/timegrid'
import interactionPlugin from '@fullcalendar/interaction'
import listPlugin from '@fullcalendar/list';
import clientAxios from '../../config/axios';
import FormularioMiHorario from '../../components/pacienteComponents/FormularioMiHorario';
import useAuth from "../../hooks/useAuth"
const Horarios= () => {
    const [consultas, setConsultas] = useState([])
    const [eventosConBotones, setEventosConBotones] = useState([]);

    const { auth} =  useAuth()
    useEffect(() => {
      const obtenerMotivosConsulta = async() =>{
        try {
          const token = localStorage.getItem('token')
          if(!token) return
    
          const config={
            headers:{
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`
          }
          }
          const { data } = await clientAxios.get('/pacientes/obtener-consultas',config)
          setConsultas(data)
        } catch (error) {
          console.log(error)
        }
    
      }
      obtenerMotivosConsulta()      
    },[])
 
    useEffect(() => {
      const consultasPendientes = consultas.filter(con => con.paciente === auth._id && con.estado === 'pagado').map(consulta => {
        
        const [hours, minutes] = consulta.horarioinicio.split(":");
        const start = new Date(consulta.fecha);
        start.setHours(hours);
        start.setMinutes(minutes);
          
        const [hours2, minutes2] = consulta.horariofin.split(":");
        const end = new Date(consulta.fecha);
        end.setHours(hours2);
        end.setMinutes(minutes2);
        
        return {
          ...consulta,
          start,
          end
        };
      });
        
      const eventos = consultasPendientes.map(consulta => {
        return {
          title: `Motivo: ${consulta.motivoconsulta.titulo} Profesional: ${consulta.profesional.nombres} ${consulta.profesional.apellidos}`,
          start: consulta.start,
          end: consulta.end,
          allDay: false,
          id: consulta._id,
        };
      });
    
      setEventosConBotones(eventos);
    }, [ auth]);
    const handleButtonClick = (event) => {
      console.log(`Button clicked for event ID: ${event.id}`);
    };
  
    const eventContent = (eventInfo) => {
      return (
        <div className="">
          <div className="fc-event-time">{eventInfo.timeText}</div>
          <div className="fc-event-title">{eventInfo.event.title}</div>
          <button className=''
            type="button"
            onClick={() => handleButtonClick(eventInfo.event)}
          >
            Ver
          </button>
        </div>
      );
    };
  
    return (
      
        <div >
          <FormularioMiHorario/>
          <div >
          <FullCalendar
  plugins={[ dayGridPlugin, timeGridPlugin, listPlugin ]}
  initialView="dayGridMonth"
  locale={esLocale}
  weekends={true}
  events={eventosConBotones}
  headerToolbar={{
    start: 'title',
    center: '',
    end: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
  }}
  eventTimeFormat={{
    hour: 'numeric',
    minute: '2-digit',
    meridiem: false
  }}
  eventDisplay="block"
  eventDidMount={function(){}}
  eventClick={function(){}}
  dayMaxEvents={true}
  eventClassNames="eventos-fullcalendar"
  height={800}
  eventContent={eventContent}
/>

      </div>
      </div>
    );
  };
  
  export default Horarios;













  {menus4?.map((menu4, i) => (
    <button onClick={handleNotificationClick}
      to={menu4.boton}
      key={i}
      className={` ${
        menu4?.margin && "mt-5"
      } group flex items-center text-sm  gap-3.5 font-medium p-2 hover:bg-gray-800 rounded-md`}
    >
      <div>{React.createElement(menu4?.icon, { size: "20" })}      {!open && numNotificaciones > 0 && (
          <div className="bg-red-500 text-white text-xs font-bold rounded-full w-4 h-4 flex items-center justify-center ml-2">
            {numNotificaciones}
          </div>
        )}   </div>
      
      <h2
        style={{
          transitionDelay: `${i + 3}00ms`,
        }}
        className={`whitespace-pre duration-500 ${
          !open && "opacity-0 translate-x-28 overflow-hidden"
        }`}
      >
        {menu4?.name}
        
      </h2>
      
      <h2
        className={`${
          open && "hidden"
        } absolute left-48 bg-white font-semibold whitespace-pre text-gray-900 rounded-md drop-shadow-lg px-0 py-0 w-0 overflow-hidden group-hover:px-2 group-hover:py-1 group-hover:left-14 group-hover:duration-300 group-hover:w-fit  `}
      >
        {menu4?.name}
        
      </h2>
      
      {open && menu4.name === "Notificaciones" && numNotificaciones > 0 &&
        <div className="bg-red-500 rounded-full px-2 py-0.5 ">{numNotificaciones}</div>
      }
    </button>
  ))}
  
      {numNotificaciones > 0 && showNotifications && (
    <div className="">
      <div className="bg-gray-800 rounded-lg shadow-lg max-w-xs overflow-y-auto">
      <div className="flex justify-end">
    <button className=" text-sm font-semibold" onClick={handleCloseNotifications}>Cerrar❌</button>
      </div>
        <div className="pt-1 pl-2">
          {consultasPendientes.map((con) => (
            <div key={con._id} className="mb-4">
              {con.profesional.image?.public_id ?
               <Image cloudName="dde62spnz" publicId={con.profesional.image?.public_id}  width="50"></Image>
              :''}
             
              
              <p className="text-white text-xs px-0.5 font-regular">El profesional <span className="font-semibold">{con.profesional.nombres} {con.profesional.apellidos} </span> 
               esta interesado en tu caso: <span className="text-red-400">{con.motivoconsulta.titulo}</span> </p>
               <div className="border mr-1 border-gray-700 rounded-md px-0.5">
              <p className="text-gray-300 text-xs "> {"'"}{con.mensaje}{"'"} </p>
              <p className="text-gray-300 text-xs ">Fecha propuesta:{formatearFecha(con.fecha)} </p>
              <p className="text-gray-400 text-xs">Horario propuesto:{con.horarioinicio}{'-'}{con.horariofin}</p>
              { con.tarifa ?
              <p className=" text-xs">Precio: <span className="text-bold text-white"> {'$'}{con.tarifa.valor.toLocaleString('es-CL')}</span></p>
              :
              <p className=" text-xs">Precio: <span className="text-bold text-white"> {'$'}{con.tarifaGlobal.valor.toLocaleString('es-CL')}</span></p>
              }
              <div className="flex text-regular text-xs gap-1 mb-1">
                <button className="bg-green-600 px-0.5 py-0.5 rounded-lg">Aceptar</button>
                <button className="bg-red-600 px-0.5 py-0.5 rounded-lg" >Rechazar</button>
                <button className="bg-blue-600 px-0.5 py-0.5 rounded-lg" >Conocer Más</button>
              </div>
              </div>
    
            </div>
  
          ))}
        </div>
      </div>
    </div>
  
  )}
        {numNotificaciones === 0 && showNotifications && (
          <div className="  px-2 p-1 bg-gray-800 rounded-lg shadow-lg max-w-xs overflow-y-auto">         
            <button className="close-btn text-sm " onClick={handleCloseNotifications}>
            Cerrar❌
            </button>
            <h1 className="text-white text-center mr-2">Sin notificaciones...</h1>
      
          </div>
        )}